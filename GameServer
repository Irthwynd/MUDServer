using System;
using System.Threading;
using System.Threading.Tasks;
using MUDServer.Core;
using MUDServer.Networking;
using MUDServer.Interfaces;

namespace MUDServer
{
    class GameServer
    {
        static async Task Main(string[] args)
        {
            // Create a CancellationTokenSource. This allows us to signal cancellation to background tasks.
            CancellationTokenSource cts = new CancellationTokenSource();

            // Instantiate the console logger for application-wide logging.
            ConsoleLogger logger = new ConsoleLogger();

            // Instantiate the game loop, which manages the game's ticking and event processing.
            GameLoop gameLoop = new GameLoop(logger);

            // Instantiate the network manager, responsible for handling incoming client connections.
            NetworkManager networkManager = new NetworkManager(4000);

            // Start the network listener asynchronously in the background.
            // This task will continue to run, accepting new client connections.
            Task networkTask = networkManager.StartListeningAsync();

            // Start the game loop asynchronously in the background, passing the cancellation token.
            // The game loop will continue to run until cancellation is requested.
            Task gameLoopTask = Task.Run(() => gameLoop.Run(cts.Token));

            // Inform the user how to stop the server.
            Console.WriteLine("Press any key to stop the server...");

            // Wait for the user to press a key on the console.
            Console.ReadKey();

            // Inform the user that the server is shutting down.
            Console.WriteLine("Shutting down server...");

            // Request cancellation of all background tasks that are observing this token.
            // This will signal the game loop to stop its main execution loop.
            cts.Cancel();

            // Use a try-catch block to handle any exceptions that might occur while waiting for tasks to complete.
            try
            {
                // Wait for both the network listener task and the game loop task to complete.
                // Task.WhenAll returns a task that completes when all of the supplied tasks have completed.
                await Task.WhenAll(networkTask, gameLoopTask);
            }
            catch (Exception ex)
            {
                // If any exception occurred during the shutdown process, log the error message.
                Console.WriteLine($"An error occurred during shutdown: {ex.Message}");
            }

            // Inform the user that the server has stopped.
            Console.WriteLine("Server stopped.");
        }
    }
}